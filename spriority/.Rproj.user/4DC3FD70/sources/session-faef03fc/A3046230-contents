---
title: "Analysis_POEM_data"
author: "Benjamin Delory"
date: "20/02/2022"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Load R packages

```{r}
library(readxl)
library(tidyverse)
library(emmeans)
library(vegan)
library(lme4)
library(gghalves)
library(MASS)
library(ggConvexHull)
library(viridis)
library(gllvm)
library(ggpubr)
library(POEM)
library(tidymv)
library(mgcv)
library(plotly)
library(hillR)
```

## Load data

```{r Load data, message=FALSE, warning=FALSE}

path<-"C:/Users/Delor003/OneDrive - Universiteit Utrecht/Documents/Research/POEM field experiment/Data"

data <- POEM_shoot_biomass_data(
  paths=list(paste(path, "Data_Biomass_POEM2020_2020-07.xlsx", sep="/"),
             paste(path, "Data_Biomass_POEM2020_2021-06.xlsx", sep="/"),
             paste(path, "Data_Biomass_POEM2020_2022-06.xlsx", sep="/"),
             paste(path, "Data_Biomass_POEM2021_2021-07.xlsx", sep="/"),
             paste(path, "Data_Biomass_POEM2021_2022-06.xlsx", sep="/")),
                                type="mixtures",
                                export=TRUE)
data<-data %>%
  dplyr::select(-Unknown)
```

## Set default colors for plotting

```{r}
#Colors for S, F, G, L, B

colors<-POEM_col()
```

## NMDS

```{r}
set.seed(123)
nmds<-metaMDS(comm=data[,9:58], distance="bray", k=2, trymax = 5000)
nmds.points<-data.frame(data[,1:8], nmds$points, data[,"Total_biomass"])
nmds.species<-data.frame(nmds$species)

nmds.points$Arrival<-factor(nmds.points$Arrival, levels=c("S", "F", "G", "L", "B"))

(p1<-ggplot(nmds.points, aes(x=MDS1, y=MDS2, colour=Arrival, fill=Arrival))+
  facet_wrap(Name_experiment~Name_growing_season, nrow=2, 
             labeller = label_wrap_gen(multi_line=FALSE))+
  geom_hline(yintercept=0, linetype=2)+
  geom_vline(xintercept = 0, linetype=2)+
  geom_point(size=2)+
  geom_convexhull(alpha=0.2)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=11),
        axis.title=element_text(size=12),
        legend.title = element_blank(),
        strip.text = element_text(size=12))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("NMDS2")+
  xlab("NMDS1"))

nmds.mean<-nmds.points %>%
  group_by(Name_experiment, Name_growing_season, Arrival) %>%
  summarise(Total_biomass=mean(Total_biomass),
            ci1=list(mean_cl_boot(MDS1) %>%
                      rename(MDS1=y, lwr.MDS1=ymin, upr.MDS1=ymax)),
            ci2=list(mean_cl_boot(MDS2) %>%
                      rename(MDS2=y, lwr.MDS2=ymin, upr.MDS2=ymax))) %>%
  unnest(cols = c(ci1, ci2))

nmds.mean$Group<-paste(nmds.mean$Name_experiment, nmds.mean$Arrival, sep="-") 
            
(p1<-ggplot(nmds.mean, aes(x=MDS1, y=MDS2, colour=Arrival, fill=Arrival, 
                           shape=Name_experiment, group=Group))+
  geom_hline(yintercept=0, linetype=2)+
  geom_vline(xintercept = 0, linetype=2)+
  geom_segment(aes(x=MDS1, xend=MDS1, y=lwr.MDS2, yend=upr.MDS2), color="grey90")+
  geom_segment(aes(y=MDS2, yend=MDS2, x=lwr.MDS1, xend=upr.MDS1), color="grey90")+
  geom_path(arrow = arrow(angle=25,
                          length = unit(0.3, "cm"),
                          type="closed"))+
  geom_point(aes(size=Total_biomass))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=11),
        axis.title=element_text(size=12),
        strip.text = element_text(size=12),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank())+
  scale_shape_manual(values=c(21,22), 
                     name="Year of initiation",
                     labels=c("2020", "2021"))+
  scale_color_manual(values=colors, 
                     name="PFG order of arrival",
                     labels=c("Synchronous",
                              "Forbs sown first",
                              "Grasses sown first",
                              "Legumes sown first",
                              "Free succession"))+
  scale_fill_manual(values=alpha(colors, 0.5), 
                    name="PFG order of arrival",
                    labels=c("Synchronous",
                              "Forbs sown first",
                              "Grasses sown first",
                              "Legumes sown first",
                              "Free succession"))+
  scale_size_continuous(name="Shoot productivity\n(g/m²)")+
  ylab("NMDS2")+
  xlab("NMDS1")+
  guides(shape=guide_legend(order=1, override.aes = list(size=4)),
         color=guide_legend(order=2),
         fill=guide_legend(order=2),
         size=guide_legend(order=3)))

ggsave("NMDS.png", dpi=1000)
```

## Shoot productivity

```{r}
(p2<-ggplot(data, aes(x=Arrival, y=Total_biomass, colour=Arrival))+
  facet_wrap(Name_experiment~Name_growing_season, nrow=2, labeller = label_wrap_gen(multi_line=FALSE))+
  geom_jitter(shape=1, width=0.2, height=0, size=2)+
  stat_summary(fun.data = "mean_cl_boot", size=0.5)+
  theme_bw()+
  ylab("Shoot dry weight (g/m²)")+
  xlab("PFG order of arrival")+
  scale_colour_manual(values=colors)+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=11),
        axis.title=element_text(size=12),
        legend.title = element_blank(),
        strip.text = element_text(size=12)))

(p2<-ggplot(data, aes(x=Arrival, y=Total_nontarget_biomass, colour=Arrival))+
  facet_wrap(Name_experiment~Name_growing_season, nrow=2, labeller = label_wrap_gen(multi_line=FALSE))+
  geom_jitter(shape=1, width=0.2, height=0, size=2)+
  stat_summary(fun.data = "mean_cl_boot", size=0.5)+
  theme_bw()+
  ylab("Shoot dry weight (g/m²)")+
  xlab("PFG order of arrival")+
  scale_colour_manual(values=colors)+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=11),
        axis.title=element_text(size=12),
        legend.title = element_blank(),
        strip.text = element_text(size=12)))

(p2<-ggplot(data, aes(x=Arrival, y=SR_target, colour=Arrival))+
  facet_wrap(Name_experiment~Name_growing_season, nrow=2, labeller = label_wrap_gen(multi_line=FALSE))+
  geom_jitter(shape=1, width=0.2, height=0, size=2)+
  stat_summary(fun.data = "mean_cl_boot", size=0.5)+
  theme_bw()+
  ylab("Species richness")+
  xlab("PFG order of arrival")+
  scale_colour_manual(values=colors)+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=11),
        axis.title=element_text(size=12),
        legend.title = element_blank(),
        strip.text = element_text(size=12)))

data1<-dplyr::filter(data, Name_experiment=="POEM2020")

model1<-glm(Total_biomass~Name_growing_season*Arrival, data1, family=Gamma(link="log"))
summary(model1)
plot(fitted(model1),resid(model1)); abline(h=0)
drop1(model1,test="F")
summary(emmeans(model1, "Arrival", by="Name_growing_season", contr="tukey"), type="response")

data2<-dplyr::filter(data, Name_experiment=="POEM2021")

model2<-glm(Total_biomass~Name_growing_season*Arrival, data2, family=Gamma(link="log"))
summary(model2)
plot(fitted(model2),resid(model2)); abline(h=0)
drop1(model2,test="F")
summary(emmeans(model2, "Arrival", by="Name_growing_season", contr="tukey"), type="response")
```

## Create combined figure 

```{r}
(p3<-ggarrange(p1, p2, nrow=1, labels=c("A", "B"), common.legend = T, align="hv", font.label = list(size=16)))

ggsave("NMDS_ShootProductivity.tiff", p3, dpi=1000, compression="lzw", width=9.82*cm(1), height=5.18*cm(1), units="cm")
```

## Hill numbers

```{r}
q.values<-seq(0,4,by=0.1)
i<-0
results<-data.frame(matrix(NA, nrow=nrow(data), ncol=length(q.values)))

for (q in q.values){
  
  i<-i+1
  
  results[,i]<-hill_taxa(comm=data[,9:58], q=q)
  
}

colnames(results)<-paste("q", q.values, sep="")

data<-cbind(data, results)

data_long<-pivot_longer(data=data, cols=q0:q4, names_to="q", names_prefix = "q", values_to = "hill_number")

data_long$q<-as.numeric(data_long$q)

data_long_avg<-data_long %>%
  group_by(Name_experiment, Name_growing_season, Arrival, q) %>%
  summarise(hill_number=mean(hill_number))

#Plot results

ggplot(data_long, aes(x=q, y=hill_number, colour=Arrival, group=Plot))+
  geom_line(alpha=0.3, linetype=2)+
  geom_line(data=data_long_avg, mapping=aes(x=q, y=hill_number, colour=Arrival), size=1,
            inherit.aes = FALSE)+
  #stat_summary(data=data_long, mapping=aes(x=q, y=hill_number, colour=Arrival),
               #fun.data="mean_cl_boot", inherit.aes = FALSE)+
  scale_color_manual(values=colors)+
  facet_wrap(Name_experiment~Name_growing_season, nrow=2, labeller = label_wrap_gen(multi_line=FALSE))+
  xlab("Diversity order (q)")+
  ylab("Effective number of species")+
  theme_bw()

```


## Root biomass

```{r}
data_root_mix <- read_excel("~/Postdoc/Experiments/POEM field experiment/Data/Data_root_sampling_POEM2020_2021-07.xlsx", sheet = "Mixtures")

View(data_root_mix)

data_root_mix_1 <- data_root_mix %>%
  group_by(Year, Plot, Arrival, Replicate) %>%
  summarise(Mass_fresh_roots_g=sum(Mass_fresh_roots_g))

data_root_mix$Arrival<-factor(data_root_mix$Arrival, levels=c("S", "F", "G", "L", "B"))

data_root_mix$Layer<-factor(data_root_mix$Layer, levels=c("0-3", "3-7", "7-13", "13-22", "22-40"))

data_root_mix_1$Arrival<-factor(data_root_mix_1$Arrival, levels=c("S", "F", "G", "L", "B"))

ggplot(data_root_mix_1, aes(x=Arrival, y=Mass_fresh_roots_g, color=Arrival))+
  geom_jitter(width=0.1, height=0, shape=1)+
  stat_summary(fun.data="mean_cl_boot")+
  theme_bw()+
  xlab("PFG order of arrival")+
  ylab("Total root fresh weight (g)")+
  scale_color_manual(values=POEM_col())+
  scale_y_continuous(limits=c(0,12), breaks=seq(0,12,by=2))+
  theme(axis.title.x = element_text(margin=margin(t=10)),
        axis.title.y = element_text(margin=margin(r=10)))

ggplot(data_root_mix, aes(x=Arrival, y=Mass_fresh_roots_g, color=Arrival))+
  geom_jitter(width=0.1, height=0, shape=1)+
  stat_summary(fun.data="mean_cl_boot")+
  theme_bw()+
  xlab("")+
  ylab("Total root fresh weight (g)")+
  scale_color_manual(values=POEM_col())+
  facet_wrap(~Layer)

ggsave("RootProductivity.tiff", dpi=1000, compression="lzw", width=14, height=10, units="cm")

```

## Comparison of RootPainter models

```{r}
#Load data
data_ben<-load_rhizovision_data("Y:/data/drive_rp_sync/projects/POEM2021_Ben/results_analysis_validation_RVE/features.csv")

data_ines<-load_rhizovision_data("Y:/data/drive_rp_sync/projects/POEM2021_Ines/results_analysis_validation_RVE/features.csv")

data_combined_annotations<-load_rhizovision_data("Y:/data/drive_rp_sync/projects/POEM2021_BenInes/results_analysis_validation_RVE/combined_annotations/features.csv")

data_model_averaging<-load_rhizovision_data("Y:/data/drive_rp_sync/projects/POEM2021_BenInes/results_analysis_validation_RVE/model_averaging/features.csv")

#Replace NA values by zero
data_ben$Total.Root.Length.mm[is.na(data_ben$Total.Root.Length.mm)==TRUE]<-0
data_ben$Network.Area.mm2[is.na(data_ben$Network.Area.mm2)==TRUE]<-0

data_ines$Total.Root.Length.mm[is.na(data_ines$Total.Root.Length.mm)==TRUE]<-0
data_ines$Network.Area.mm2[is.na(data_ines$Network.Area.mm2)==TRUE]<-0

data_combined_annotations$Total.Root.Length.mm[is.na(data_combined_annotations$Total.Root.Length.mm)==TRUE]<-0
data_combined_annotations$Network.Area.mm2[is.na(data_combined_annotations$Network.Area.mm2)==TRUE]<-0

data_model_averaging$Total.Root.Length.mm[is.na(data_model_averaging$Total.Root.Length.mm)==TRUE]<-0
data_model_averaging$Network.Area.mm2[is.na(data_model_averaging$Network.Area.mm2)==TRUE]<-0

#Calculate root length density and root surface area
res<-148 #resolution: 148 px/mm

area_cm2<-(2340/res/10)*(2400/res/10) #Calculate the area of an image in cm²

data_ben$rld_cm.per.cm2<-(data_ben$Total.Root.Length.mm/10)/area_cm2 #Root length density
data_ben$rsa_cm2.per.cm2<-(data_ben$Network.Area.mm2/100)/area_cm2 #Root surface area

data_ines$rld_cm.per.cm2<-(data_ines$Total.Root.Length.mm/10)/area_cm2 #Root length density
data_ines$rsa_cm2.per.cm2<-(data_ines$Network.Area.mm2/100)/area_cm2 #Root surface area

data_combined_annotations$rld_cm.per.cm2<-(data_combined_annotations$Total.Root.Length.mm/10)/area_cm2 #Root length density
data_combined_annotations$rsa_cm2.per.cm2<-(data_combined_annotations$Network.Area.mm2/100)/area_cm2 #Root surface area

data_model_averaging$rld_cm.per.cm2<-(data_model_averaging$Total.Root.Length.mm/10)/area_cm2 #Root length density
data_model_averaging$rsa_cm2.per.cm2<-(data_model_averaging$Network.Area.mm2/100)/area_cm2 #Root surface area

#Create data frame

data_validation<-data.frame(data_ben[,1:12],
                            rld_ben=data_ben$rld_cm.per.cm2,
                            rld_ines=data_ines$rld_cm.per.cm2,
                            rld_combined_annotations=data_combined_annotations$rld_cm.per.cm2,
                            rld_model_averaging=data_model_averaging$rld_cm.per.cm2,
                            rsa_ben=data_ben$rsa_cm2.per.cm2,
                            rsa_ines=data_ines$rsa_cm2.per.cm2,
                            rsa_combined_annotations=data_combined_annotations$rsa_cm2.per.cm2,
                            rsa_model_averaging=data_model_averaging$rsa_cm2.per.cm2)

#Plot results for rld

(p1<-ggplot(data_validation, aes(x=rld_ben, y=rld_ines, colour=Depth_cm, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rld_ben, y=rld_ines), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("RLD (cm/cm²) - Model 1")+
  ylab("RLD (cm/cm²) - Model 2")+
  coord_fixed()+
  scale_colour_viridis())

(p2<-ggplot(data_validation, aes(x=rld_ben, y=rld_combined_annotations, colour=Depth_cm, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rld_ben, y=rld_combined_annotations), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("RLD (cm/cm²) - Model 1")+
  ylab("RLD (cm/cm²) - Model 3")+
  coord_fixed()+
  scale_colour_viridis())

(p3<-ggplot(data_validation, aes(x=rld_ben, y=rld_model_averaging, colour=Depth_cm, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rld_ben, y=rld_model_averaging), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("RLD (cm/cm²) - Model 1")+
  ylab("RLD (cm/cm²) - Model 4")+
  coord_fixed()+
  scale_colour_viridis())

(p4<-ggplot(data_validation, aes(x=rld_ines, y=rld_combined_annotations, colour=Depth_cm, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rld_ines, y=rld_combined_annotations), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("RLD (cm/cm²) - Model 2")+
  ylab("RLD (cm/cm²) - Model 3")+
  coord_fixed()+
  scale_colour_viridis())

(p5<-ggplot(data_validation, aes(x=rld_ines, y=rld_model_averaging, colour=Depth_cm, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rld_ines, y=rld_model_averaging), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("RLD (cm/cm²) - Model 2")+
  ylab("RLD (cm/cm²) - Model 4")+
  coord_fixed()+
  scale_colour_viridis())

(p6<-ggplot(data_validation, aes(x=rld_combined_annotations, y=rld_model_averaging, colour=Depth_cm, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rld_combined_annotations, y=rld_model_averaging), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("RLD (cm/cm²) - Model 3")+
  ylab("RLD (cm/cm²) - Model 4")+
  coord_fixed()+
  scale_colour_viridis())

(p<-ggarrange(p1,p2,p3,p4,p5,p6, ncol=3, nrow=2, common.legend = TRUE, align = "hv"))

ggplotly(p, tooltip="text")

#Fit linear model for rld

model<-lm(rld_ines~rld_ben, data_validation)
summary(model)

#Plot results for rsa

(p<-ggplot(data_validation, aes(x=rsa_ben, y=rsa_ines, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  geom_abline(intercept = 0, slope=1, colour="red")+
  geom_smooth(data=data_validation, mapping=aes(x=rsa_ben, y=rsa_ines), inherit.aes = F,
              method="lm", formula=y~x)+
  theme_bw()+
  xlab("Root surface area (cm²/cm²) - Ben")+
  ylab("Root surface area (cm²/cm²) - Ines")+
  coord_fixed())

ggplotly(p, tooltip="text")

#Fit linear model for rsa

model<-lm(rsa_ines~rsa_ben, data_validation)
summary(model)

#Calculate absolute error

data_validation$error_rld<-data_validation$rld_ben-data_validation$rld_ines

(p<-ggplot(data_validation, aes(x=Name_experiment, y=error_rld, text=paste(
  "Tube: ", Tube, "\n",
  "Location: ", Location, "\n",
  "Session: ", Session,
  sep="")))+
  geom_point(shape=1)+
  theme_bw()+
  geom_hline(yintercept=0))

ggplotly(p, tooltip="text")

data_validation<-data_validation[order(abs(data_validation$error_rld), decreasing = T),]

(p<-ggplot(data_validation, aes(x=Depth_cm, y=error_rld))+
  geom_point(shape=1)+
  geom_smooth()+
  stat_summary(fun.data="mean_cl_boot", colour="red")+
  theme_bw())

```

## Highlight differences between model segmentations

```{python}
#Load libraries
import os as os
import shutil as shutil
import numpy as np
from PIL import Image
import pandas as pd
from scipy import ndimage
import matplotlib.pyplot as plt

#Image file to analyse
image = "POEM2021_T001_L024_2022.04.12_093139_016_IAC"
image = "POEM2021_T005_L040_2021.07.10_092420_006_KS" #
image = "POEM2021_T027_L034_2022.04.12_115637_016_IAC" ###
image = "POEM2021_T037_L014_2022.04.12_124351_016_IAC"
image = "POEM2021_T027_L032_2022.04.12_115627_016_IAC"
image = "POEM2021_T019_L042_2022.04.12_110702_016_IAC"
image = "POEM2021_T040_L016_2022.04.12_125849_016_IAC"
image = "POEM2021_T020_L012_2022.04.12_111008_016_IAC"
image = "POEM2021_T001_L012_2022.04.12_093010_016_IAC"
image = "POEM2021_T016_L040_2021.07.10_101728_006_KS"

image="POEM2021_T001_L032_2021.07.10_085751_006_KS"

path_ben = "Y:/data/drive_rp_sync/projects/POEM2021_Ben/results_validation/" + image + ".png"
path_ines = "Y:/data/drive_rp_sync/projects/POEM2021_Ines/results_validation/" + image + ".png"
path_combined_annotations = "Y:/data/drive_rp_sync/projects/POEM2021_BenInes/results_validation/combined_annotations/" + image + ".png"
path_model_averaging = "Y:/data/drive_rp_sync/projects/POEM2021_BenInes/results_validation/model_averaging/" + image + ".png"

#Load images
image_ben = np.array(Image.open(path_ben).convert('L'))
image_ines = np.array(Image.open(path_ines).convert('L'))
image_combined_annotations = np.array(Image.open(path_combined_annotations).convert('L'))
image_model_averaging = np.array(Image.open(path_model_averaging).convert('L'))

#Replace values>0 by 1. Keep value=0 otherwise.
image_ben = np.where(image_ben>0, 1, 0)
image_ines = np.where(image_ines>0, 1, 0)
image_combined_annotations = np.where(image_combined_annotations>0, 1, 0)
image_model_averaging = np.where(image_model_averaging>0, 1, 0)

#Substract images (ben-ines)
substracted_image = image_ben-image_ines

#Plot images for comparison
fig, axs = plt.subplots(2, 2)
axs[0,0].imshow(image_ben, cmap="binary")
axs[0,0].set_title('Model 1')
axs[0,1].imshow(image_ines, cmap="binary")
axs[0,1].set_title('Model 2')
axs[1,0].imshow(image_combined_annotations, cmap="binary")
axs[1,0].set_title('Model 3')
axs[1,1].imshow(image_model_averaging, cmap="binary")
axs[1,1].set_title('Model 4')
fig.tight_layout()
plt.show()

#Plot substracted image
fig, axs = plt.subplots(1, 1)
im1=plt.imshow(substracted_image)
plt.title('Ben-Ines')
plt.colorbar(im1)
plt.show()
```

## Analysis of minirhizotron data

### Load and format root data

```{r}
#Load data in R
data_root<-load_rhizovision_data("Z:/Poem/Data/Minirhizotrons/2022/features.csv")

#Define Plot and Tube as factors
#Arrival is already a factor
data_root$Plot<-factor(data_root$Plot)
data_root$Tube<-factor(data_root$Tube)

#Replace NA values by zero
data_root$Total.Root.Length.mm[is.na(data_root$Total.Root.Length.mm)==TRUE]<-0
data_root$Network.Area.mm2[is.na(data_root$Network.Area.mm2)==TRUE]<-0

#Calculate average Days values when images were taken on different days
average_days<-aggregate(data_root$Days, 
                        by=list(data_root$Session), 
                        function(x) {mean(range(x))})

data_root$Days<-average_days$x[match(data_root$Session, average_days$Group.1)]

#Calculate root length density and root surface area
res<-148 #resolution: 148 px/mm

area1_cm2<-(2464/res/10)*(3280/res/10) #Area of an image in cm² (session 1)
area_cm2<-(2340/res/10)*(2400/res/10) #Area of an image in cm²

#Create empty columns
data_root$rld_cm.per.cm2<-NA
data_root$rsa_cm2.per.cm2<-NA

#Calculate RLD and RSA for session 1
index<-which(data_root$Session==1)
data_root$rld_cm.per.cm2[index]<-(data_root$Total.Root.Length.mm[index]/10)/area1_cm2
data_root$rsa_cm2.per.cm2[index]<-(data_root$Network.Area.mm2[index]/100)/area1_cm2

#Calculate RLD and RSA for other sessions
index<-which(data_root$Session!=1)
data_root$rld_cm.per.cm2[index]<-(data_root$Total.Root.Length.mm[index]/10)/area_cm2
data_root$rsa_cm2.per.cm2[index]<-(data_root$Network.Area.mm2[index]/100)/area_cm2

#Average tubes in each plot
data_root<-data_root %>% 
  group_by(Plot, Arrival, Depth_cm, Days) %>%
  summarise(rld_cm.per.cm2=mean(rld_cm.per.cm2),
            rsa_cm2.per.cm2=mean(rsa_cm2.per.cm2))
```

### Get POEM weather data

```{r}
weather<-import_weather_data()

weather<-weather %>% 
  add_column(Date=as.Date(weather$Time), .after="Time") %>%
  group_by(Date) %>%
  filter(Date >= as.Date("2021-04-13")) %>%
  filter(Date <= as.Date("2022-08-17")) %>%
  summarise(avg_temp=mean(avg_AirTemp, na.rm=T),
            min_temp=min(avg_AirTemp, na.rm=T),
            max_temp=max(avg_AirTemp, na.rm=T),
            rain_mm=sum(AmountOfPrecipDif, na.rm=T)) %>%
  add_column(Days=0:491, .after="Date")

#Calculate secondary axis for precipitation data
min1<-min(weather[,"min_temp"])
max1<-max(weather[,"max_temp"])
min2<-min(weather[,"rain_mm"])
max2<-max(weather[,"rain_mm"])
slope<-(max2-min2)/(max1-min1)

weather<-weather %>% add_column(new=(weather$rain_mm-min2+slope*min1)/slope)
```

### Analysis of total root productivity over time

#### Data

```{r}
#Calculate average RLD and RSA per plot
data1<-data_root %>%
  group_by(Plot, Arrival, Days) %>%
  summarise(rld_inverseCV=mean(rld_cm.per.cm2)/sd(rld_cm.per.cm2),
            rsa_inverseCV=mean(rsa_cm2.per.cm2)/sd(rsa_cm2.per.cm2),
            rld_cm.per.cm2=mean(rld_cm.per.cm2),
            rsa_cm2.per.cm2=mean(rsa_cm2.per.cm2))
```

#### Root length density

```{r}
#Plot raw data
supp.labs <- c("Forbs sown first (F)", 
               "Grasses sown first (G)", 
               "Legumes sown first (L)", 
               "Synchronous sowing (S)")
names(supp.labs) <- c("F", "G", "L", "S")

ggplot(data1, aes(y=rld_cm.per.cm2, x=Days, color=Arrival))+
  geom_smooth(method="loess")+
  geom_point()+
  scale_color_manual(values=colors[-5], 
                     name="PFG order of arrival")+
  theme_bw()+
  ylab("Root length density (cm/cm²)")+
  xlab("Time since start (days)")+
  theme(legend.position = "none",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  scale_y_continuous(breaks=seq(0,10,by=1))+
  coord_cartesian(xlim=c(0,491))+
  facet_wrap(~Arrival, 
             labeller = labeller(Arrival = supp.labs))

#Fit GAM
n.time<-length(unique(data_root$Days))

model<-mgcv::gam(rld_cm.per.cm2~Arrival+s(Days, by=Arrival, k=n.time)+s(Plot, bs="re"), 
                 data = data1, 
                 family=tw(link="log"))

#Check model fit
gam.check(model, rep=500)
summary(model)
anova(model)

#Create new data to make predictions using GAM
a<-c("G","S","F","S","L","F","G","S","F","L","L","S","L","F","L","G","G","F","S","G")

n<-length(seq(min(data_root$Days),max(data_root$Days),by=1))

newdata<-data.frame(Days=rep(seq(min(data_root$Days),max(data_root$Days),by=1), 20),
                    Plot=factor(rep(unique(data_root$Plot), each=n)),
                    Arrival=factor(rep(a, each=n)))

#Predict without random effect smooths
newdata$pred<-mgcv::predict.gam(model, 
                                newdata=newdata, 
                                type="response", 
                                se=TRUE, 
                                exclude=c("s(Plot)"))$fit

newdata$se<-mgcv::predict.gam(model, 
                              newdata=newdata, 
                              type="response", 
                              se=TRUE, 
                              exclude=c("s(Plot)"))$se.fit

#Predict with random effect smooths
newdata$pred_all<-mgcv::predict.gam(model, 
                                    newdata=newdata, 
                                    type="response", 
                                    se=TRUE)$fit

newdata$se_all<-mgcv::predict.gam(model, 
                                  newdata=newdata, 
                                  type="response", 
                                  se=TRUE)$se.fit

#Plot results with random effects
ggplot(data1, aes(y=rld_cm.per.cm2, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=pred_all, color=Arrival, group=Plot), 
            inherit.aes = FALSE, size=0.8)+
  geom_point(shape=1)+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Root length density (cm/cm²)")+
  xlab("Time since start (days)")+
  theme(legend.position = "bottom",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  coord_cartesian(xlim=c(0,491))

#Plot results and model fit
p1<-ggplot(weather, aes(x=Days, y=avg_temp))+
  geom_ribbon(aes(ymin=min_temp, ymax=max_temp), 
              fill="gray50", color=NA, alpha=0.2)+
  geom_segment(aes(x=Days, xend=Days, y=(0-min2+slope*min1)/slope, yend=new), 
               colour="steelblue", size=0.6)+
  geom_line(size=0.3)+
  theme_bw()+
  xlab("")+
  ylab("Temperature (°C)")+
  theme(axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.y.right=element_text(margin = margin(l=10)),
        axis.text=element_text(color="black"),
        axis.text.x.top = element_text(angle=60, hjust = 0, vjust=0, size=6),
        axis.text.x.bottom = element_text(angle=90, hjust = 1, vjust=0.5, size=6),
        axis.title.x.top = element_blank(),
        axis.title.x.bottom = element_blank(),
        panel.grid.minor = element_blank())+
  scale_x_continuous(breaks=floor(unique(data_root$Days)),
                     sec.axis = dup_axis(labels = function(x) {weather$Date[match(floor(x), weather$Days)]}))+
  scale_y_continuous(sec.axis=sec_axis(~.*slope+min2-slope*min1, name="Precipitation (mm)"))+
  coord_cartesian(xlim=c(0,491))

p2<-ggplot(data1, aes(y=rld_cm.per.cm2, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=pred, color=Arrival), inherit.aes = FALSE, size=0.6)+
  stat_summary(fun.data="mean_cl_boot", position=position_dodge(width=8), size=0.15)+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Root length density (cm/cm²)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  scale_y_continuous(breaks=seq(0,8,by=1))+
  coord_cartesian(xlim=c(0,491))

p3<-ggarrange(p1, p2, ncol=1, nrow=2, align="v", heights = c(0.35,0.65))

ggsave("RLD_over_time.tiff", p3, dpi=1000)
```

#### Root surface area

```{r}
#Calculate average root length density per plot
data1<-data_root %>%
  group_by(Plot, Arrival, Days) %>%
  summarise(rld_inverseCV=mean(rld_cm.per.cm2)/sd(rld_cm.per.cm2),
            rsa_inverseCV=mean(rsa_cm2.per.cm2)/sd(rsa_cm2.per.cm2),
            rld_cm.per.cm2=mean(rld_cm.per.cm2),
            rsa_cm2.per.cm2=mean(rsa_cm2.per.cm2))

#Plot raw data
supp.labs <- c("Forbs sown first (F)", 
               "Grasses sown first (G)", 
               "Legumes sown first (L)", 
               "Synchronous sowing (S)")
names(supp.labs) <- c("F", "G", "L", "S")

ggplot(data1, aes(y=rsa_cm2.per.cm2, x=Days, color=Arrival))+
  geom_smooth(method="loess")+
  geom_point()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Root surface area (cm²/cm²)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "none",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  scale_y_continuous(breaks=seq(0,10,by=1))+
  coord_cartesian(xlim=c(0,491))+
  facet_wrap(~Arrival, labeller = labeller(Arrival = supp.labs))

#Fit GAM
n.time<-length(unique(data_root$Days))

model<-mgcv::gam(rsa_cm2.per.cm2~Arrival+s(Days, by=Arrival, k=n.time)+s(Plot, bs="re"), 
                 data = data1, 
                 family=tw(link="log"))

#Check model fit
gam.check(model, rep=500)
summary(model)
gratia::draw(model, scales="free") #Similar to plot.gam, but uses ggplot2
anova(model) #ANOVA table
mgcv::gam.vcomp(model) #Get variance components (as standard deviations)

#Make predictions using GAM
a<-c("G","S","F","S","L","F","G","S","F","L","L","S","L","F","L","G","G","F","S","G")

n<-length(seq(min(data_root$Days),max(data_root$Days),by=1))

newdata<-data.frame(Days=rep(seq(min(data_root$Days),max(data_root$Days),by=1), 20),
                    Plot=factor(rep(unique(data_root$Plot), each=n)),
                    Arrival=factor(rep(a, each=n)))

newdata$pred<-mgcv::predict.gam(model, 
                                newdata=newdata, 
                                type="response", 
                                se=TRUE, 
                                exclude=c("s(Plot)"))$fit #Predict without random effect smooths

newdata$se<-mgcv::predict.gam(model, 
                              newdata=newdata, 
                              type="response", 
                              se=TRUE, 
                              exclude=c("s(Plot)"))$se.fit #Predict without random effect smooths

newdata$pred_all<-mgcv::predict.gam(model, 
                                    newdata=newdata, 
                                    type="response", 
                                    se=TRUE)$fit #Predict with random effect smooths

newdata$se_all<-mgcv::predict.gam(model, 
                                  newdata=newdata, 
                                  type="response", 
                                  se=TRUE)$se.fit #Predict with random effect smooths

#Plot results (with random effects)
ggplot(data1, aes(y=rsa_cm2.per.cm2, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=pred_all, color=Arrival, group=Plot), 
            inherit.aes = FALSE, size=0.8)+
  geom_point(shape=1)+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Root surface area (cm²/cm²)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  #scale_y_continuous(breaks=seq(0,8,by=1))+
  coord_cartesian(xlim=c(0,491))

#Plot results and model fit
p1<-ggplot(weather, aes(x=Days, y=avg_temp))+
  geom_ribbon(aes(ymin=min_temp, ymax=max_temp), 
              fill="gray50", color=NA, alpha=0.2)+
  geom_segment(aes(x=Days, xend=Days, y=(0-min2+slope*min1)/slope, yend=new), 
               colour="steelblue", size=1)+
  geom_line()+
  theme_bw()+
  xlab("")+
  ylab("Temperature (°C)")+
  theme(axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.y.right=element_text(margin = margin(l=10)),
        axis.text=element_text(color="black"),
        axis.text.x.top = element_text(angle=60, hjust = 0, vjust=0, size=8),
        axis.text.x.bottom = element_text(angle=90, hjust = 1, vjust=0.5, size=8),
        axis.title.x.top = element_blank(),
        axis.title.x.bottom = element_blank(),
        panel.grid.minor = element_blank())+
  scale_x_continuous(breaks=floor(unique(data_root$Days)),
                     sec.axis = dup_axis(labels = function(x) {weather$Date[match(floor(x), weather$Days)]}))+
  scale_y_continuous(sec.axis=sec_axis(~.*slope+min2-slope*min1, name="Precipitation (mm)"))+
  coord_cartesian(xlim=c(0,491))

p2<-ggplot(data1, aes(y=rsa_cm2.per.cm2, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=pred, color=Arrival), inherit.aes = FALSE, size=0.8)+
  stat_summary(fun.data="mean_cl_boot", position=position_dodge(width=7))+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Root surface density (cm²/cm²)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  #scale_y_continuous(breaks=seq(0,8,by=1))+
  coord_cartesian(xlim=c(0,491))

(p3<-ggarrange(p1, p2, ncol=1, nrow=2, align="v", heights = c(0.35,0.65)))
```

### Analysis of average rooting depth over time

#### Root length density

```{r}
#Calculate average rooting depth per tube
data2<-data_root %>%
  filter(Days>100) %>%
  group_by(Plot, Arrival, Days) %>%
  summarise(avg.rooting.depth_cm=sum(rld_cm.per.cm2*Depth_cm)/sum(rld_cm.per.cm2))

#Fit GAM
n.time<-length(unique(data2$Days))

model<-mgcv::gam(avg.rooting.depth_cm~Arrival+s(Days, by=Arrival, k=n.time)+s(Plot, bs="re"), 
                 data = data2, 
                 family=tw(link="log"))

#Check model fit
gam.check(model, rep=500)
summary(model)
anova(model) #ANOVA table
summary(emmeans(model, 
                "Arrival", 
                by="Days", 
                at=list(Days=unique(data2$Days)), 
                contr="pairwise"),
        type="response")

#Make predictions using GAM
a<-c("G","S","F","S","L","F","G","S","F","L","L","S","L","F","L","G","G","F","S","G")

n<-length(seq(min(data2$Days),max(data2$Days),by=1))

newdata<-data.frame(Days=rep(seq(min(data2$Days),max(data2$Days),by=1), 20),
                    Plot=factor(rep(unique(data_root$Plot), each=n)),
                    Arrival=factor(rep(a, each=n)))

newdata$pred<-mgcv::predict.gam(model, 
                                newdata=newdata, 
                                type="response", 
                                se=TRUE, 
                                exclude=c("s(Plot)"))$fit #Predict without random effect smooths
newdata$se<-mgcv::predict.gam(model, newdata=newdata, type="response", se=TRUE, exclude=c("s(Plot)", "s(Tube)"))$se.fit #Predict without random effect smooths

newdata$pred_all<-mgcv::predict.gam(model, newdata=newdata, type="response", se=TRUE)$fit #Predict with random effect smooths
newdata$se_all<-mgcv::predict.gam(model, newdata=newdata, type="response", se=TRUE)$se.fit #Predict with random effect smooths

#Plot results (with random effects)
ggplot(data2, aes(y=-avg.rooting.depth_cm, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=-pred_all, color=Arrival, group=Plot), 
            inherit.aes = FALSE, size=0.8)+
  geom_point(shape=1)+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Average rooting depth (cm)")+
  xlab("Time since start (days)")+
  scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  #scale_y_continuous(breaks=seq(0,8,by=1))+
  coord_cartesian(xlim=c(339,441))#+
  #facet_wrap(~Tube)

#Plot results and model fit
ggplot(data2, aes(y=-avg.rooting.depth_cm, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=-pred, color=Arrival, group=Plot), 
            inherit.aes = FALSE, size=0.8)+
  stat_summary(fun.data="mean_cl_boot", position=position_dodge(width=3))+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Average rooting depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))#+
  #scale_y_continuous(breaks=seq(0,8,by=1))+
  #coord_cartesian(xlim=c(339,441))
```

#### Root surface area

```{r}
#Calculate average rooting depth per tube
data2<-data_root %>%
  filter(Days>100) %>%
  group_by(Plot, Arrival, Days) %>%
  summarise(avg.rooting.depth_cm=sum(rsa_cm2.per.cm2*Depth_cm)/sum(rsa_cm2.per.cm2))

#Fit GAM
n.time<-length(unique(data2$Days))

model<-mgcv::gam(avg.rooting.depth_cm~Arrival+s(Days, by=Arrival, k=n.time)+s(Plot, bs="re"), data = data2, family=tw(link="log"))

#Check model fit
gam.check(model, rep=500)
summary(model)
gratia::draw(model, scales="free") #Similar to plot.gam, but uses ggplot2
anova(model) #ANOVA table
mgcv::gam.vcomp(model) #Get variance components (as standard deviations)
summary(emmeans(model, "Arrival", by="Days", contr="pairwise"), type="response")

#Make predictions using GAM
a<-c("G","S","F","S","L","F","G","S","F","L","L","S","L","F","L","G","G","F","S","G")

n<-length(seq(min(data2$Days),max(data2$Days),by=1))

newdata<-data.frame(Days=rep(seq(min(data2$Days),max(data2$Days),by=1), 20),
                    Plot=factor(rep(unique(data_root$Plot), each=n)),
                    Arrival=factor(rep(a, each=n)))

newdata$pred<-mgcv::predict.gam(model, 
                                newdata=newdata, 
                                type="response", 
                                se=TRUE, 
                                exclude=c("s(Plot)"))$fit #Predict without random effect smooths
newdata$se<-mgcv::predict.gam(model, newdata=newdata, type="response", se=TRUE, exclude=c("s(Plot)", "s(Tube)"))$se.fit #Predict without random effect smooths

newdata$pred_all<-mgcv::predict.gam(model, newdata=newdata, type="response", se=TRUE)$fit #Predict with random effect smooths
newdata$se_all<-mgcv::predict.gam(model, newdata=newdata, type="response", se=TRUE)$se.fit #Predict with random effect smooths

#Plot results (with random effects)
ggplot(data2, aes(y=-avg.rooting.depth_cm, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=-pred_all, color=Arrival, group=Plot), 
            inherit.aes = FALSE, size=0.8)+
  geom_point(shape=1)+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Average rooting depth (cm)")+
  xlab("Time since start (days)")+
  scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  #scale_y_continuous(breaks=seq(0,8,by=1))+
  coord_cartesian(xlim=c(339,441))#+
  #facet_wrap(~Tube)

#Plot results and model fit
ggplot(data2, aes(y=-avg.rooting.depth_cm, x=Days, color=Arrival))+
  geom_line(data=newdata, aes(x=Days, y=-pred, color=Arrival, group=Plot), 
            inherit.aes = FALSE, size=0.8)+
  stat_summary(fun.data="mean_cl_boot", position=position_dodge(width=3))+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Average rooting depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "bottom",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))#+
  #scale_y_continuous(breaks=seq(0,8,by=1))+
  #coord_cartesian(xlim=c(339,441))
```

### Root distribution as a function of time and depth

#### Root length density

```{r}
#
newdata_avg.root.depth<-newdata

#Fit model
model<-mgcv::gam(rld_cm.per.cm2~Arrival+te(Days, Depth_cm, by=Arrival)+s(Plot, bs="re"), 
                 data=data_root, 
                 family=tw(link="log"))

#Check model fit
gam.check(model, rep=500)
summary(model)
gratia::draw(model, scales="free") #Similar to plot.gam, but uses ggplot2
anova(model) #ANOVA table
mgcv::gam.vcomp(model) #Get variance components (as standard deviations)

#Make predictions using GAM
a<-c("G","S","F","S","L","F","G","S","F","L","L","S","L","F","L","G","G","F","S","G")
days<-seq(min(data_root$Days),max(data_root$Days),by=0.5)
depths<-seq(min(data_root$Depth_cm),max(data_root$Depth_cm),by=0.25)

n.days<-length(days)
n.depths<-length(depths)

newdata<-data.frame(Plot=factor(rep(unique(data_root$Plot), each=n.depths*n.days)),
                    Arrival=factor(rep(a, each=n.depths*n.days)),
                    Days=rep(rep(days, n.depths),20),
                    Depth_cm=rep(rep(depths, each=n.days),20))

newdata$Arrival<-factor(newdata$Arrival, levels = c("S", "F", "G", "L"))

newdata$pred<-mgcv::predict.gam(model, 
                                newdata=newdata, 
                                type="response", 
                                se=TRUE, 
                                exclude=c("s(Plot)"))$fit #Predict without random effect smooths

newdata$se<-mgcv::predict.gam(model, 
                              newdata=newdata, 
                              type="response", 
                              se=TRUE, 
                              exclude=c("s(Plot)"))$se.fit #Predict without random effect smooths

newdata$pred_all<-mgcv::predict.gam(model, 
                                    newdata=newdata, 
                                    type="response", 
                                    se=TRUE)$fit #Predict with random effect smooths

newdata$se_all<-mgcv::predict.gam(model, 
                                  newdata=newdata, 
                                  type="response", 
                                  se=TRUE)$se.fit #Predict with random effect smooths

#Plot model predictions
supp.labs <- c("Forbs sown first (F)", "Grasses sown first (G)", "Legumes sown first (L)", "Synchronous sowing (S)")
names(supp.labs) <- c("F", "G", "L", "S")

newdata %>% filter(Plot %in% c(201,202,203,205)) %>%
  ggplot(aes(x=Days, y=-Depth_cm, z=pred))+
  geom_raster(aes(fill=pred))+
  geom_contour(colour="black", bins=12, size=0.3, linetype=3)+
  stat_summary(data=data2,
               mapping=aes(x=Days, y=-avg.rooting.depth_cm),
               color="white",
               size=0.15,
               fun.data="mean_cl_boot",
               inherit.aes = FALSE)+
  geom_line(data=newdata_avg.root.depth,
            mapping=aes(x=Days, y=-pred, color=Arrival),
            inherit.aes = FALSE,
            size=1)+
  geom_line(data=newdata_avg.root.depth,
            mapping=aes(x=Days, y=-pred-2*se, color=Arrival),
            inherit.aes = FALSE,
            linetype=2)+
  geom_line(data=newdata_avg.root.depth,
            mapping=aes(x=Days, y=-pred+2*se, color=Arrival),
            inherit.aes = FALSE,
            linetype=2)+
  facet_wrap(~Arrival, 
             labeller = labeller(Arrival = supp.labs),
             nrow=1)+
  scale_fill_viridis(direction=1, name="Root\nlength\ndensity\n(cm/cm²)",
                     option = "B")+
  scale_color_manual(values=colors[-5], guide="none")+
  theme_bw()+
  ylab("Soil depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))

ggsave("RLD_Depth_Time.tiff", dpi=1000)

#Plot model predictions for each plot (raster)
newdata %>%
  ggplot(aes(x=Days, y=-Depth_cm, z=pred_all))+
  geom_raster(aes(fill=pred_all))+
  geom_contour(colour="black", bins=12, size=0.5, linetype=3)+
  facet_wrap(~Plot)+
  scale_fill_viridis(direction=1, name="Root\nlength\ndensity\n(cm/cm²)",
                     option = "B")+
  theme_bw()+
  ylab("Soil depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text.x = element_text(angle=45, hjust = 1, vjust=1),
        axis.text=element_text(color="black"))

#Plot model predictions for each time point (raw data, one line per plot)
data_root %>%
  filter(Days %in% c(1.5,71,160,339,415,491)) %>%
  ggplot(aes(y=rld_cm.per.cm2, x=-Depth_cm, colour=Arrival, group=Plot))+
  geom_line(data=filter(newdata, Days %in% c(1.5,71,160,339,415,491)), 
            mapping=aes(y=pred_all, x=-Depth_cm, colour=Arrival, group=Plot), 
            inherit.aes = FALSE, 
            size=0.1)+
  geom_point(shape=1, size=0.8)+
  facet_grid(Arrival~Days)+
  theme_bw()+
  coord_flip()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  ylab("Root length density (cm/cm²)")+
  xlab("Soil depth (cm)")+
  theme(legend.position = "none",
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))

#Plot model predictions for each time point (average values)

data_root %>%
  filter(Days %in% c(1.5,71,160,339,415,491)) %>%
ggplot(aes(y=rld_cm.per.cm2, x=-Depth_cm, colour=Arrival))+
  geom_line(data=filter(newdata, Days %in% c(1.5,71,160,339,415,491)), mapping=aes(y=pred, x=-Depth_cm, colour=Arrival), inherit.aes = FALSE, size=0.8)+
  stat_summary(fun.data="mean_cl_boot", shape=1, size=0.3)+
  facet_grid(Arrival~Days)+
  theme_bw()+
  coord_flip()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  ylab("Root length density (cm/cm²)")+
  xlab("Soil depth (cm)")+
  theme(legend.position = "none",
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))

#Calculate mean rooting depth using model predictions
data3<-newdata %>%
  group_by(Plot, Arrival, Days) %>%
  summarise(avg.rooting.depth_cm=sum(pred_all*Depth_cm)/sum(pred_all)) %>%
  filter(Days %in% unique(data_root$Days))
  
#Plot results for mean rooting depth
supp.labs <- c("Forbs sown first (F)", "Grasses sown first (G)", "Legumes sown first (L)", "Synchronous sowing (S)")
names(supp.labs) <- c("F", "G", "L", "S")

data3 %>%
  ggplot(aes(y=-avg.rooting.depth_cm, x=Days, color=Arrival))+
  geom_smooth(method="loess")+
  geom_point()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Average rooting depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "none",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  #coord_cartesian(xlim=c(0,491))+
  facet_wrap(~Arrival, labeller = labeller(Arrival = supp.labs))

```

#### Root surface area

```{r}
#Fit model
model<-mgcv::gam(rsa_cm2.per.cm2~Arrival+te(Days, Depth_cm, by=Arrival)+s(Plot, bs="re"), 
                 data=data_root, 
                 family=tw(link="log"))

#Check model fit
gam.check(model, rep=500)
summary(model)
gratia::draw(model, scales="free") #Similar to plot.gam, but uses ggplot2
anova(model) #ANOVA table
mgcv::gam.vcomp(model) #Get variance components (as standard deviations)

#Make predictions using GAM
a<-c("G","S","F","S","L","F","G","S","F","L","L","S","L","F","L","G","G","F","S","G")
days<-seq(min(data_root$Days),max(data_root$Days),by=0.5)
depths<-seq(min(data_root$Depth_cm),max(data_root$Depth_cm),by=0.25)

n.days<-length(days)
n.depths<-length(depths)

newdata<-data.frame(Plot=factor(rep(unique(data_root$Plot), each=n.depths*n.days)),
                    Arrival=factor(rep(a, each=n.depths*n.days)),
                    Days=rep(rep(days, n.depths),20),
                    Depth_cm=rep(rep(depths, each=n.days),20))

newdata$Arrival<-factor(newdata$Arrival, levels = c("S", "F", "G", "L"))

newdata$pred<-mgcv::predict.gam(model, 
                                newdata=newdata, 
                                type="response", 
                                se=TRUE, 
                                exclude=c("s(Plot)"))$fit #Predict without random effect smooths

newdata$se<-mgcv::predict.gam(model, 
                              newdata=newdata, 
                              type="response", 
                              se=TRUE, 
                              exclude=c("s(Plot)"))$se.fit #Predict without random effect smooths

newdata$pred_all<-mgcv::predict.gam(model, 
                                    newdata=newdata, 
                                    type="response", 
                                    se=TRUE)$fit #Predict with random effect smooths

newdata$se_all<-mgcv::predict.gam(model, 
                                  newdata=newdata, 
                                  type="response", 
                                  se=TRUE)$se.fit #Predict with random effect smooths

#Plot model predictions
supp.labs <- c("Forbs sown first (F)", "Grasses sown first (G)", "Legumes sown first (L)", "Synchronous sowing (S)")
names(supp.labs) <- c("F", "G", "L", "S")

newdata %>% filter(Plot %in% c(201,202,203,205)) %>%
  ggplot(aes(x=Days, y=-Depth_cm, z=pred))+
  geom_raster(aes(fill=pred))+
  geom_contour(colour="black", bins=12, size=0.5, linetype=3)+
  facet_wrap(~Arrival, labeller = labeller(Arrival = supp.labs))+
  scale_fill_viridis(direction=1, name="Root\nsurface\narea\n(cm²/cm²)",
                     option = "B")+
  theme_bw()+
  ylab("Soil depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))

#Plot model predictions for each plot (raster)
newdata %>%
  ggplot(aes(x=Days, y=-Depth_cm, z=pred_all))+
  geom_raster(aes(fill=pred_all))+
  geom_contour(colour="black", bins=12, size=0.5, linetype=3)+
  facet_wrap(~Plot)+
  scale_fill_viridis(direction=1, name="Root\nlength\ndensity\n(cm/cm²)",
                     option = "B")+
  theme_bw()+
  ylab("Soil depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text.x = element_text(angle=45, hjust = 1, vjust=1),
        axis.text=element_text(color="black"))

#Plot model predictions for each time point (raw data, one line per plot)
data_root %>%
  filter(Days %in% c(1.5,71,160,339,415,491)) %>%
  ggplot(aes(y=rld_cm.per.cm2, x=-Depth_cm, colour=Arrival, group=Plot))+
  geom_line(data=filter(newdata, Days %in% c(1.5,71,160,339,415,491)), 
            mapping=aes(y=pred_all, x=-Depth_cm, colour=Arrival, group=Plot), 
            inherit.aes = FALSE, 
            size=0.1)+
  geom_point(shape=1, size=0.8)+
  facet_grid(Arrival~Days)+
  theme_bw()+
  coord_flip()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  ylab("Root length density (cm/cm²)")+
  xlab("Soil depth (cm)")+
  theme(legend.position = "none",
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))

#Plot model predictions for each time point (average values)

data_root %>%
  filter(Days %in% c(1.5,71,160,339,415,491)) %>%
ggplot(aes(y=rld_cm.per.cm2, x=-Depth_cm, colour=Arrival))+
  geom_line(data=filter(newdata, Days %in% c(1.5,71,160,339,415,491)), mapping=aes(y=pred, x=-Depth_cm, colour=Arrival), inherit.aes = FALSE, size=0.8)+
  stat_summary(fun.data="mean_cl_boot", shape=1, size=0.3)+
  facet_grid(Arrival~Days)+
  theme_bw()+
  coord_flip()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  ylab("Root length density (cm/cm²)")+
  xlab("Soil depth (cm)")+
  theme(legend.position = "none",
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))

#Calculate mean rooting depth using model predictions
data3<-newdata %>%
  group_by(Plot, Arrival, Days) %>%
  summarise(avg.rooting.depth_cm=sum(pred_all*Depth_cm)/sum(pred_all)) %>%
  filter(Days %in% unique(data_root$Days))
  
#Plot results for mean rooting depth
supp.labs <- c("Forbs sown first (F)", "Grasses sown first (G)", "Legumes sown first (L)", "Synchronous sowing (S)")
names(supp.labs) <- c("F", "G", "L", "S")

data3 %>%
  ggplot(aes(y=-avg.rooting.depth_cm, x=Days, color=Arrival))+
  geom_smooth(method="loess")+
  geom_point()+
  scale_color_manual(values=colors[-5], name="PFG order of arrival")+
  theme_bw()+
  ylab("Average rooting depth (cm)")+
  xlab("Time since start (days)")+
  #scale_x_continuous(breaks=unique(data_root$Days))+
  theme(legend.position = "none",
        axis.text.x.top = element_text(angle=40, hjust = 0, vjust=0),
        axis.title.x.top = element_blank(),
        axis.title.y.left = element_text(margin=margin(r=10)),
        axis.title.x.bottom = element_text(margin=margin(t=10)),
        axis.text=element_text(color="black"))+
  #coord_cartesian(xlim=c(0,491))+
  facet_wrap(~Arrival, labeller = labeller(Arrival = supp.labs))

```


## Other stuffs

```{r}
#Calculate contribution of target species to community yield

data$Target_rel<-100*apply(data[,c(7,10,14,19,23,25,26,28,31,32,35,38,41,42)], 1, sum)/data$Total

data2<-filter(data, Arrival!="B")

aggregate(data2$Target_rel, by=list(HarvestYear=data2$HarvestYear), mean)

#Calculate dissimilarity in structure between plant communities

nmds<-metaMDS(comm=data[,6:ncol(data)], distance="bray", k=2, trymax = 1000)
nmds.points<-data.frame(data[,1:5], nmds$points)

nmds.points$Arrival<-factor(nmds.points$Arrival, levels=c("S", "F", "G", "L", "B"))

nmds.centroids<-aggregate(nmds.points[,6:7], by=list(Year=nmds.points$Year, Harvest=nmds.points$Harvest, Arrival=nmds.points$Arrival), mean)

nmds.centroids$Harvest<-as.numeric(str_sub(nmds.centroids$Harvest, 1, 4))

nmds.centroids$d<-NA

for (i in 1:nrow(nmds.centroids)){
  
  experiment<-nmds.centroids$Year[i]
  harvest<-nmds.centroids$Harvest[i]
  
  xref<-nmds.centroids$MDS1[which(nmds.centroids$Year==experiment &
                                    nmds.centroids$Harvest==harvest &
                                    nmds.centroids$Arrival=="S")]
  
  yref<-nmds.centroids$MDS2[which(nmds.centroids$Year==experiment &
                                    nmds.centroids$Harvest==harvest &
                                    nmds.centroids$Arrival=="S")]
  
  x<-nmds.centroids$MDS1[i]
  y<-nmds.centroids$MDS2[i]
  
  nmds.centroids$d[i]<-sqrt((x-xref)^2+(y-yref)^2)}

nmds.centroids<-filter(nmds.centroids, Arrival!="S")
nmds.centroids<-filter(nmds.centroids, Arrival!="B")

nmds.centroids$Year[nmds.centroids$Year==2020]<-"Sub-experiment 1"
nmds.centroids$Year[nmds.centroids$Year==2021]<-"Sub-experiment 2"

nmds.centroids$Harvest<-as.factor(nmds.centroids$Harvest)

colors<-c("#56B4E9", "#E69F00", "#009E73")

ggplot(nmds.centroids, aes(x=Harvest, y=d, shape=Year, color=Arrival))+
  geom_line(data=filter(nmds.centroids, Year=="Sub-experiment 1"),
            aes(x=Harvest, y=d, group=Arrival, color=Arrival), inherit.aes = F)+
  geom_point(size=3)+
  theme_classic()+
  scale_color_manual(values=colors)+
  ylab("")+
  xlab("")+
  theme(axis.text = element_blank(),
        axis.ticks = element_blank(),
        legend.position = "none")

ggsave("Dissimilarity_Time.png")
```

## Create function for species richness - area relationships

```{r}
sar<-function(x, col.sp=5:34){
  
  results<-data.frame(PlotID=rep(NA, 125),
                      Arrival=rep(NA, 125),
                      Surface=rep(NA, 125),
                      SR=rep(NA, 125))
  
  plots<-sort(unique(x[,"PlotID"]))
  surfaces<-c(0,0.1,0.2,0.3,0.4)
  
  k<-0
  
  for (plot in plots){
    
    sub<-x[x$PlotID==plot,]
    
    for (surface in surfaces){
      
      k<-k+1
      
      if (surface==0.1) {comb<-combn(1:4, m=1)}
      if (surface==0.2) {comb<-combn(1:4, m=2)}
      if (surface==0.3) {comb<-combn(1:4, m=3)}
      if (surface==0.4) {comb<-combn(1:4, m=4)}
      
      if (surface != 0){
        
        sr<-c()
        
        for (i in 1:ncol(comb)){sr[i]<-sum(apply(sub[comb[,i], col.sp], 2, sum)>0)}
        
        results[k,]<-c(plot, unique(sub[,"Arrival"]), surface, mean(sr))} 
      
      else {results[k,]<-c(plot, unique(sub[,"Arrival"]), surface, 0)}}}
  
  results$Surface<-as.numeric(results$Surface)
  results$SR<-as.numeric(results$SR)
  
  return(results)}
  
```

## Create function for biomass - area relationships

```{r}
bar<-function(x, col.sp=5:34, SA=0.2*0.5){
  
  #x contains biomass data expressed in g/m²
  
  x[,col.sp]<-x[,col.sp]*SA
  
  results<-data.frame(PlotID=rep(NA, 125),
                      Arrival=rep(NA, 125),
                      Surface=rep(NA, 125),
                      Biomass=rep(NA, 125))
  
  plots<-sort(unique(x[,"PlotID"]))
  surfaces<-c(0,0.1,0.2,0.3,0.4)
  
  k<-0
  
  for (plot in plots){
    
    sub<-x[x$PlotID==plot,]
    
    for (surface in surfaces){
      
      k<-k+1
      
      if (surface==0.1) {comb<-1}
      if (surface==0.2) {comb<-1:2}
      if (surface==0.3) {comb<-1:3}
      if (surface==0.4) {comb<-1:4}
      
      if (surface != 0){
        
        biomass<-sum(apply(sub[comb, col.sp], 1, sum))/surface
        
        results[k,]<-c(plot, unique(sub[,"Arrival"]), surface, biomass)} 
      
      else {results[k,]<-c(plot, unique(sub[,"Arrival"]), surface, 0)}}}
  
  results$Surface<-as.numeric(results$Surface)
  results$Biomass<-as.numeric(results$Biomass)
  
  return(results)}
  
```

```{r}
#Aggregate data
mix1<-aggregate(mix[,5:34], by=list(Year=mix$Year, PlotID=mix$PlotID, Arrival=mix$Arrival), sum)
mix1<-as.data.frame(mix1)
mix1<-mix1[order(mix1$PlotID),]

lai1<-aggregate(lai[,4], by=list(PlotID=lai$PlotID, Arrival=lai$Arrival), mean, na.rm=TRUE)
colnames(lai1)[3]<-"LAI"
lai1<-lai1[order(lai1$PlotID),]

#Define factor
mix1$Arrival<-factor(mix1$Arrival, levels=c("S", "F", "G", "L", "B"))
mix$Arrival<-factor(mix$Arrival, levels=c("S", "F", "G", "L", "B"))
lai1$Arrival<-factor(lai1$Arrival, levels=c("S", "F", "G", "L", "B"))
lai$Arrival<-factor(lai$Arrival, levels=c("S", "F", "G", "L", "B"))
colors<-c("#999999", "#56B4E9", "#E69F00", "#009E73", "black")

#Convert in g/m²
SA<-0.2*0.5
mix1[,4:33]<-mix1[,4:33]/(4*SA)
mix[,5:34]<-mix[,5:34]/SA

#Calculate SDW total
mix1$Total<-apply(mix1[,4:33], 1, sum)
mix1$TotTarget<-apply(mix1[,4:17], 1, sum)
mix1$TotNonTarget<-mix1$Total-mix1$TotTarget

mix$Total<-apply(mix[,5:34], 1, sum)
mix$TotTarget<-apply(mix[,5:18], 1, sum)
mix$TotNonTarget<-mix$Total-mix$TotTarget

#Plot total SDW (both target and non-target species)
ggplot(mix, aes(x=Arrival, y=Total, colour=Arrival, fill=Arrival))+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Total shoot dry weight (g/m²)")+
  xlab("")

#ggsave("POEM2020_total_productivity_2020.tiff", dpi=1000, compression="lzw", width=10, height = 10, units="cm")

model<-lmer(Total~Arrival+(1|PlotID), data=mix)
plot(fitted(model), resid(model, type="pearson"), ylab="Pearson residuals", xlab="Fitted values"); abline(h=0)
summary(model)
drop1(model, test="Chisq")
summary(emmeans(model, "Arrival", contr="pairwise"), type="response")

#Plot total SDW (separately for target and non target species)

data_productivity<-data.frame(Arrival=rep(mix$Arrival, 3),
                              PlotID=rep(mix$PlotID, 3),
                              Quadrat=rep(mix$Quadrat, 3),
                              Pool=c(rep("All species", nrow(mix)), rep("Target species", nrow(mix)), rep("Non-target species", nrow(mix))),
                              Value=c(mix$Total, mix$TotTarget, mix$TotNonTarget))

ggplot(data_productivity, aes(x=Arrival, y=Value, colour=Arrival, fill=Arrival))+
  facet_wrap(~Pool, ncol=3, scales="free_y")+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11),
        strip.text=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Total shoot dry weight (g/m²)")+
  xlab("")

#ggsave("POEM2020_total_productivity_target_nontarget_2020.tiff", dpi=1000, compression="lzw", width=15, height = 9, units="cm")

#Plot biomass production for all non-target species

data_productivity_nontarget<-data.frame(Arrival=rep(mix$Arrival, 16),
                              PlotID=rep(mix$PlotID, 16),
                              Quadrat=rep(mix$Quadrat, 16),
                              Species=rep(colnames(mix)[19:34], each=nrow(mix)),
                              Value=as.vector(as.matrix(mix[,19:34])))

ggplot(data_productivity_nontarget, aes(x=Arrival, y=Value, colour=Arrival, fill=Arrival))+
  facet_wrap(~Species, scales="free_y")+
  geom_point(shape=1, size=1.2)+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11),
        strip.text=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Total shoot dry weight (g/m²)")+
  xlab("")

#Plot LAI
ggplot(lai, aes(x=Arrival, y=LAI, colour=Arrival, fill=Arrival))+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Leaf area index (m²/m²)")+
  xlab("")

#ggsave("POEM2020_lai_2020.tiff", dpi=1000, compression="lzw", width=10, height = 10, units="cm")

model.lai<-lmer(LAI~Arrival+(1|PlotID), lai)
plot(fitted(model.lai), resid(model.lai, type="pearson"), ylab="Pearson residuals", xlab="Fitted values"); abline(h=0)
summary(model.lai)
drop1(model.lai, test="Chisq")
summary(emmeans(model.lai, "Arrival", contr="pairwise"), type="response")

#Plot biodiversity indices
mix$Shannon<-diversity(mix[,5:34], index="shannon")
mix$Simpson<-diversity(mix[,5:34], index="simpson")

mix1$Shannon<-diversity(mix1[,4:33], index="shannon")
mix1$Simpson<-diversity(mix1[,4:33], index="simpson")

mix1$TarShannon<-diversity(mix1[,4:17], index="shannon")

mix2<-mix1[mix1$PlotID==114|mix1$PlotID==111,]

#Shannon's diversity index
ggplot(mix, aes(x=Arrival, y=Shannon, colour=Arrival, fill=Arrival))+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Shannon's diversity index")+
  xlab("")

#ggsave("POEM2020_shannon_2020.tiff", dpi=1000, compression="lzw", width=10, height = 10, units="cm")

model.shannon<-lmer(Shannon~Arrival+(1|PlotID), mix)
plot(fitted(model.shannon), resid(model.shannon, type="pearson"), ylab="Pearson residuals", xlab="Fitted values"); abline(h=0)
summary(model.shannon)
drop1(model.shannon, test="Chisq")
summary(emmeans(model.shannon, "Arrival", contr="pairwise"), type="response")

#Simpson's diversity index
ggplot(mix, aes(x=Arrival, y=Simpson, colour=Arrival, fill=Arrival))+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.6, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Simpson's diversity index")+
  xlab("")

model.simpson<-glmer(Simpson~Arrival+(1|PlotID), mix, family=Gamma(link="log"))
plot(fitted(model.simpson), resid(model.simpson, type="pearson"), ylab="Pearson residuals", xlab="Fitted values"); abline(h=0)
summary(model.simpson)
drop1(model.simpson, test="Chisq")
summary(emmeans(model.simpson, "Arrival", contr="pairwise"))

#Plot relationship between LAI and Total productivity
mix1$LAI<-lai1$LAI

ggplot(mix1, aes(x=LAI, y=Total, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        legend.position="none",
        axis.text=element_text(colour = "black"))+
  scale_color_manual(values=colors)+
  ylab("Total shoot dry weight (g/m²)")+
  xlab("LAI (m²/m²)")+
  stat_smooth(data=mix1, aes(x=LAI, y=Total), inherit.aes = FALSE)

cor.test(mix1$LAI, mix1$Total, method="pearson")

#Fit generalized linear latent variables model
Y<-mix1[,4:33]
Y<-Y[,-which(apply(Y, 2, sum)==0)]
model <- gllvm(y=Y, family = "tweedie", num.lv = 2, method="LA")

#NMDS
nmds<-metaMDS(comm=mix1[,4:33], distance="bray", k=2)
nmds.points<-data.frame(mix1[,1:3], nmds$points)
nmds.species<-data.frame(nmds$species)

species.names<-strsplit(rownames(nmds.species), split="\\.")
species.names<-lapply(species.names, function(x){strsplit(x, split="")})
species.names<-sapply(species.names, function(x){lapply(x, function(y){y[1:2]})})
species.names<-sapply(species.names, function(x){lapply(x, function(y){paste(y, collapse="")})})
species.names<-sapply(species.names, function(x){paste(x, collapse="")})

ggplot(nmds.points, aes(x=MDS1, y=MDS2, colour=Arrival, fill=Arrival))+
  geom_point(shape=16, size=2)+
  geom_convexhull(alpha=0.2)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11),
        legend.title = element_blank())+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("NMDS2")+
  xlab("NMDS1")#+
  #geom_text(data=nmds.species, aes(x=MDS1, y=MDS2, label=species.names), inherit.aes = FALSE)

#ggsave("POEM2020_nmds_2020.tiff", dpi=1000, compression="lzw", width=15, height = 10, units="cm")

```

\#\#Create figure for annual report

```{r}
setwd("C:/Users/Delory/Documents/Postdoc/Experiments/POEM field experiment/Figures")

mix<-read.csv("C:/Users/Delory/Documents/Postdoc/Experiments/POEM field experiment/Data/Data_mixtures_POEM2020.csv", header=TRUE, stringsAsFactors=FALSE)

mono<-read.csv("C:/Users/Delory/Documents/Postdoc/Experiments/POEM field experiment/Data/Data_monocultures_POEM2020.csv", header=TRUE, stringsAsFactors=FALSE)

lai<-read.csv("C:/Users/Delory/Documents/Postdoc/Experiments/POEM field experiment/Data/Data_LAI_POEM2020.csv", header=TRUE, stringsAsFactors=FALSE)

#Aggregate data
mix1<-aggregate(mix[,5:34], by=list(Year=mix$Year, PlotID=mix$PlotID, Arrival=mix$Arrival), sum)
mix1<-as.data.frame(mix1)
mix1<-mix1[order(mix1$PlotID),]

lai1<-aggregate(lai[,4], by=list(PlotID=lai$PlotID, Arrival=lai$Arrival), mean, na.rm=TRUE)
colnames(lai1)[3]<-"LAI"
lai1<-lai1[order(lai1$PlotID),]

#Define factor
mix1$Arrival<-factor(mix1$Arrival, levels=c("S", "F", "G", "L", "B"))
mix$Arrival<-factor(mix$Arrival, levels=c("S", "F", "G", "L", "B"))
lai1$Arrival<-factor(lai1$Arrival, levels=c("S", "F", "G", "L", "B"))
lai$Arrival<-factor(lai$Arrival, levels=c("S", "F", "G", "L", "B"))
colors<-c("#999999", "#56B4E9", "#E69F00", "#009E73", "black")

#Convert in g/m²
SA<-0.2*0.5
mix1[,4:33]<-mix1[,4:33]/(4*SA)
mix[,5:34]<-mix[,5:34]/SA

#Calculate SDW total
mix1$Total<-apply(mix1[,4:33], 1, sum)
mix1$TotTarget<-apply(mix1[,4:17], 1, sum)
mix1$TotNonTarget<-mix1$Total-mix1$TotTarget

mix$Total<-apply(mix[,5:34], 1, sum)
mix$TotTarget<-apply(mix[,5:18], 1, sum)
mix$TotNonTarget<-mix$Total-mix$TotTarget

#Plot total SDW (separately for target and non target species)

data_productivity<-data.frame(Arrival=rep(mix$Arrival, 3),
                              PlotID=rep(mix$PlotID, 3),
                              Quadrat=rep(mix$Quadrat, 3),
                              Pool=c(rep("All species", nrow(mix)), rep("Target species", nrow(mix)), rep("Non-target species", nrow(mix))),
                              Value=c(mix$Total, mix$TotTarget, mix$TotNonTarget))

p3<-ggplot(data_productivity, aes(x=Arrival, y=Value, colour=Arrival, fill=Arrival))+
  facet_wrap(~Pool, ncol=3, scales="free_y")+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11),
        strip.text=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  ylab("Total shoot dry weight (g/m²)")+
  xlab("PFG order of arrival")

#Plot LAI
p2<-ggplot(lai, aes(x=Arrival, y=LAI, colour=Arrival, fill=Arrival))+
  geom_half_violin(color=adjustcolor("white", alpha.f = 0.1), alpha=0.1, side="l", position=position_nudge(x=-0.1))+
  geom_point(shape=1, size=1.2, position=position_nudge(x=-0.1))+
  stat_summary(fun.data="mean_cl_boot", fun.args=list(B=10000), size=0.5, position=position_nudge(x=0.1))+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=5)),
        axis.title.x=element_text(margin=margin(t=10)),
        legend.position="none",
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11))+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  scale_y_continuous(breaks=seq(1.5,4,by=0.5))+
  ylab("Leaf area index (m²/m²)")+
  xlab("PFG order of arrival")

#NMDS
nmds<-metaMDS(comm=mix1[,4:33], distance="bray", k=2)
nmds.points<-data.frame(mix1[,1:3], nmds$points)
nmds.species<-data.frame(nmds$species)

species.names<-strsplit(rownames(nmds.species), split="\\.")
species.names<-lapply(species.names, function(x){strsplit(x, split="")})
species.names<-sapply(species.names, function(x){lapply(x, function(y){y[1:2]})})
species.names<-sapply(species.names, function(x){lapply(x, function(y){paste(y, collapse="")})})
species.names<-sapply(species.names, function(x){paste(x, collapse="")})

add.text<-data.frame(Arrival=c("B", "F", "G", "L", "S"),
                     Label=c("B", "F", "G", "L", "S"),
                     x=c(-0.4,-0.13,0.12,0.05,0.48),
                     y=c(0.06,-0.2,0.25,-0.05,0))

p1<-ggplot(nmds.points, aes(x=MDS1, y=MDS2, colour=Arrival, fill=Arrival))+
  geom_point(shape=16, size=2)+
  geom_convexhull(alpha=0.2)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black", size=10),
        axis.title=element_text(size=11),
        legend.title = element_blank(),
        legend.position="none")+
  scale_color_manual(values=colors)+
  scale_fill_manual(values=colors)+
  geom_text(data=add.text, aes(x=x, y=y, label=Label, colour=Arrival), fontface="bold")+
  ylab("NMDS2")+
  xlab("NMDS1")

#Create figure

p4<-ggarrange(p1,p2, ncol=2, labels=c("A", "B"), align="hv")

p5<-ggarrange(p4, p3, nrow=2, labels=c("", "C"))

ggsave("Main_results_POEM2020.tiff", dpi=1000, compression="lzw")
```

## Species richness - area relationships

```{r}
#For all species
data.sar<-sar(x=mix, col.sp = 5:34)
data.sar$Arrival<-factor(data.sar$Arrival, levels=c("S", "F", "G", "L", "B"))
colors<-c("#999999", "#56B4E9", "#E69F00", "#009E73", "black")

ggplot(data.sar, aes(x=Surface, y=SR, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  facet_wrap(~Arrival)+
  theme(legend.position="none",
        axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black"))+
  xlab("Area (m²)")+
  ylab("Total species richness")+
  stat_smooth()+
  scale_color_manual(values=colors)

#For target species only
data.sar<-sar(x=mix, col.sp = 5:18)
data.sar$Arrival<-factor(data.sar$Arrival, levels=c("S", "F", "G", "L", "B"))
colors<-c("#999999", "#56B4E9", "#E69F00", "#009E73", "black")

ggplot(data.sar, aes(x=Surface, y=SR, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  facet_wrap(~Arrival)+
  theme(legend.position="none",
        axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black"))+
  xlab("Area (m²)")+
  ylab("Target species richness")+
  stat_smooth()+
  scale_color_manual(values=colors)

```

## Biomass - area relationships

```{r}
data.bar<-bar(x=mix, col.sp = 5:34)
data.bar$Arrival<-factor(data.bar$Arrival, levels=c("S", "F", "G", "L", "B"))
colors<-c("#999999", "#56B4E9", "#E69F00", "#009E73", "black")

ggplot(data.bar, aes(x=Surface, y=Biomass, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  facet_wrap(~Arrival)+
  theme(legend.position="none",
        axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        axis.text=element_text(colour = "black"))+
  xlab("Area (m²)")+
  ylab("Total shoot dry weight (g/m²)")+
  stat_smooth()+
  scale_color_manual(values=colors)

```

```{r}
mix1$Forbs<-apply(mix1[,c("Dianthus.deltoides",
                          "Jasione.montana",
                          "Pilosella.officinarum",
                          "Pimpinella.saxifraga",
                          "Potentilla.argentea",
                          "Silene.vulgaris")], 1, sum)

mix1$Grasses<-apply(mix1[,c("Agrostis.capillaris",
                            "Anthoxanthum.odoratum",
                            "Bromus.hordeaceus",
                            "Festuca.ovina")], 1, sum)

mix1$Legumes<-apply(mix1[,c("Lathyrus.pratensis",
                            "Lotus.corniculatus",
                            "Trifolium.arvense",
                            "Trifolium.campestre")], 1, sum)

ggplot(mix1, aes(x=LAI, y=Forbs, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        legend.position="none",
        axis.text=element_text(colour = "black"))+
  scale_color_manual(values=colors)+
  ylab("Forb shoot dry weight (g/m²)")+
  xlab("LAI (m²/m²)")+
  stat_smooth(data=mix1, aes(x=LAI, y=Forbs), inherit.aes = FALSE)

cor.test(mix1$Forbs, mix1$LAI, method="pearson")
cor.test(mix1$Forbs, mix1$LAI, method="spearman")

ggplot(mix1, aes(x=LAI, y=Grasses, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        legend.position="none",
        axis.text=element_text(colour = "black"))+
  scale_color_manual(values=colors)+
  ylab("Grass shoot dry weight (g/m²)")+
  xlab("LAI (m²/m²)")#+
  #stat_smooth(data=mix1, aes(x=LAI, y=Grasses), inherit.aes = FALSE)

ggplot(mix1, aes(x=LAI, y=Legumes, colour=Arrival))+
  geom_point(shape=1)+
  theme_bw()+
  theme(axis.title.y=element_text(margin=margin(r=10)),
        axis.title.x=element_text(margin=margin(t=10)),
        legend.position="none",
        axis.text=element_text(colour = "black"))+
  scale_color_manual(values=colors)+
  ylab("Legume shoot dry weight (g/m²)")+
  xlab("LAI (m²/m²)")+
  stat_smooth(data=mix1, aes(x=LAI, y=Legumes), inherit.aes = FALSE)
```

#### Fit gamma component of hurdle model

```{r Fit gamma model, message=FALSE, warning=FALSE}
pos<-subset(mix1, Forbs>0) #Only select positive RDW values

#Fit GLM with gamma distribution
H1<-glm(Forbs~LAI, data=pos, family=Gamma(link="log"))
summary(H1)

#Model validation
E1<-resid(H1, type="pearson")
F1<-fitted(H1, type="response")
plot(F1, E1, xlab="Fitted values", ylab="Residuals"); abline(h=0)

#Make predictions
pred.mm <- data.frame(LAI=seq(min(pos$LAI), max(pos$LAI), by=0.01))
pred.mm$Pred <- predict(H1, newdata=pred.mm, type="response")

#Plot GLMM fit
(p5<-ggplot(pred.mm) +
    geom_point(data=pos, aes(x=LAI, y=Forbs, colour=Arrival), shape=1) +
    geom_line(aes(x = LAI, y = Pred), size=1) +
    ylab("Forb shoot dry weight (g/m²)")+
    xlab("LAI (m²/m²)")+ 
    theme_bw()+
    theme(legend.title=element_blank(),
          axis.text=element_text(size=10, color="black"),
          axis.title.y = element_text(margin=margin(r=10)),
          axis.title.x = element_text(margin=margin(t=10)))+
    scale_color_manual(values=colors))
```

#### Fit binomial component of hurdle model

```{r Fit binomial model, message=FALSE, warning=FALSE}
mix1$Forbs.01<-as.numeric(mix1$Forbs > 0)

#Fit GLM with a binomial distribution
H2<-glm(Forbs.01~LAI, data=mix1, family=binomial(link="logit"))
summary(H2)

#Make predictions
pred.mm <- data.frame(LAI=seq(min(mix1$LAI), max(mix1$LAI), by=0.01))
pred.mm$Pred <- predict(H2, newdata=pred.mm, type="response")

#Plot GLM fit
(p7<-ggplot(pred.mm) +
    geom_point(data=mix1, aes(x=LAI, y=Forbs.01, colour=Arrival), shape=1) +
    geom_line(aes(x = LAI, y = Pred), size=1) +
    ylab("Probability that forbs are present")+
    xlab("LAI (m²/m²)")+ 
    theme_bw()+
    theme(legend.title=element_blank(),
          axis.text=element_text(size=10, color="black"),
          axis.title.y = element_text(margin=margin(r=10)),
          axis.title.x = element_text(margin=margin(t=10)))+
    scale_color_manual(values=colors))
```

#### Merge gamma and binomial components

------------------------------------------------------------------------

```{r Create hurdle model, message=FALSE, warning=FALSE, fig.height=3.94, fig.width=3.94}
beta<-coef(H1) #Extract regression coefficients of Gamma GLMM
gamma<-coef(H2) #Extract regression coefficients of Binomial GLMM

#Create new data for predictions
newdata <- data.frame(LAI=seq(min(mix1$LAI), max(mix1$LAI), by=0.01))

X<-model.matrix(~LAI, data=newdata)

mu <- exp(X %*% beta)
Pi  <- exp(X %*% gamma) / (1 + exp(X %*% gamma))

#Get predictions for Hurdle model
newdata$PredZAG<-Pi * mu

#Plot hurdle model fit
(p8<-ggplot(mix1) +
    geom_jitter(data=mix1, aes(x=LAI, y=Forbs, colour=Arrival), shape=1) +
    geom_line(data=newdata, aes(x = LAI, y = PredZAG), size=0.8) +
    ylab("Forb shoot dry weight (g/m²)")+
    xlab("LAI (m²/m²)")+ 
    theme_bw()+
    theme(legend.title=element_blank(),
          axis.text=element_text(size=10, color="black"),
          axis.title.y = element_text(margin=margin(r=10)),
          axis.title.x = element_text(margin=margin(t=10)))+
    scale_color_manual(values=colors))

#ggsave("Vertical_root_distribution_2.tiff", p8, dpi=1000, compression="lzw", width=10, height=9.5, units="cm")
```

## Calculate Standardised Precipitation Evapotranspiration Index (SPEI)

```{r}
values_spei<-spei.poem()

ggplot(data=values_spei$daily, aes(x=as.Date(Date), y=SPEI, fill=SPEI>0))+
  geom_bar(stat="identity")+
  theme_bw()+
  theme(legend.position="none")+
  scale_x_date(date_breaks = "2 weeks",
               sec.axis=sec_axis(trans=~.,
                                breaks=as.Date(c("2020-04-27", "2020-06-08", "2020-07-27", "2020-08-06")),
                                 labels=c("First\nsowing", "Second\nsowing", "H", "M")))+
  theme(axis.text.x.bottom = element_text(angle=90, vjust=0.5, hjust=0.5),
        axis.text.x.top = element_text(vjust=0.5, hjust=0.5),
        axis.title=element_text(colour="black", size=9),
        axis.text=element_text(colour="black", size=8))+
  xlab("")+
  scale_fill_viridis(option="E", discrete=T, direction=-1)

#ggsave("SPEI.tiff", dpi=1000, compression="lzw", width=15, height=10, units="cm")

```
